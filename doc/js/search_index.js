var search_data = {"index":{"searchIndex":["ellipoint","ellithmetic","point","projpoint","*()","**()","+()","-()","-@()","==()","==()","a()","a=()","b()","b=()","base()","base=()","belongs_to()","divide()","infty()","inverse()","isinfty?()","new()","new()","new()","x()","y()"],"longSearchIndex":["ellipoint","ellithmetic","point","projpoint","ellipoint#*()","ellipoint#**()","ellipoint#+()","ellipoint#-()","ellipoint#-@()","point#==()","projpoint#==()","ellipoint::a()","ellipoint::a=()","ellipoint::b()","ellipoint::b=()","point::base()","point::base=()","projpoint#belongs_to()","ellithmetic#divide()","ellipoint::infty()","ellithmetic#inverse()","projpoint#isinfty?()","ellipoint::new()","point::new()","projpoint::new()","projpoint#x()","projpoint#y()"],"info":[["ElliPoint","","ElliPoint.html","","<p>This class implements a projective tri-dimensional point of an elliptic\ncurve in <em>Z/pZ</em>.\n<p>Coordinates\n<p>Coordinates …\n"],["Ellithmetic","","Ellithmetic.html","","<p>This module implements specific arithmetics methods.\n<p>Division ring\n<p>Every operation is performed in <em>Z/pZ</em> …\n"],["Point","","Point.html","","<p>This class implements a tri-dimensional point in <em>Z/pZ</em>.\n<p>Coordinates\n<p>Coordinates are stored as accessible …\n"],["ProjPoint","","ProjPoint.html","","<p>This class implements a projective tri-dimensional point in <em>Z/pZ</em>.\n<p>Coordinates\n<p>Coordinates are stored as …\n"],["*","ElliPoint","ElliPoint.html#method-i-2A","(n)","<p>Returns the result (multiplication) of the combination of this elliptic\npoint with an integer, using …\n"],["**","ElliPoint","ElliPoint.html#method-i-2A-2A","(p)","<p>Returns the result of the combination of this elliptic point with another,\nusing the <em>star</em> law.\n<p>Examples …\n"],["+","ElliPoint","ElliPoint.html#method-i-2B","(p)","<p>Returns the result (addition) of the combination of this elliptic point\nwith another, using the <em>plus</em> …\n"],["-","ElliPoint","ElliPoint.html#method-i-2D","(p)","<p>Returns the result (substraction) of the combination of this elliptic point\nwith another, using the  …\n"],["-@","ElliPoint","ElliPoint.html#method-i-2D-40","()","<p>Returns the opposite of this point.\n<p>Examples\n<p>Basic usage:\n"],["==","Point","Point.html#method-i-3D-3D","(point)","<p>Tests if this point is equal to the passed-in point.\n<p>Attributes\n<p><code>point</code> - The point to test equality to. ...\n"],["==","ProjPoint","ProjPoint.html#method-i-3D-3D","(point)","<p>Tests if this projective point is equal to the passed-in projective point.\n<p>Attributes\n<p><code>point</code> - The projective ...\n"],["a","ElliPoint","ElliPoint.html#method-c-a","()","<p>Gets the <em>a</em> parameter currently used for the elliptic curve.\n"],["a=","ElliPoint","ElliPoint.html#method-c-a-3D","(a)","<p>Sets the <em>a</em> parameter currently used for the elliptic curve.\n<p>WARNING: in order to obtain a valid elliptic …\n"],["b","ElliPoint","ElliPoint.html#method-c-b","()","<p>Gets the <em>b</em> parameter currently used for the elliptic curve.\n"],["b=","ElliPoint","ElliPoint.html#method-c-b-3D","(b)","<p>Sets the <em>b</em> parameter currently used for the elliptic curve.\n<p>WARNING: in order to obtain a valid elliptic …\n"],["base","Point","Point.html#method-c-base","()","<p>Gets the base of <em>Z/pZ</em> currently used for points.\n"],["base=","Point","Point.html#method-c-base-3D","(base)","<p>Sets the base of <em>Z/pZ</em> currently used for points.\n<p>WARNING: in order to set up a projective space for elliptic …\n"],["belongs_to","ProjPoint","ProjPoint.html#method-i-belongs_to","(a,b)","<p>Tests if this projective point belongs to a specific elliptic curve.\n<p>WARNING: this method only checks …\n"],["divide","Ellithmetic","Ellithmetic.html#method-i-divide","(n, q, base)","<p>Computes the division of a number by another in <em>Z/pZ</em>\n<p>Attributes\n<p><code>n</code> - The number to divide. It will be reduced ...\n"],["infty","ElliPoint","ElliPoint.html#method-c-infty","()","<p>Returns the <em>infinity point</em>.\n<p>Examples\n<p>Basic usage:\n"],["inverse","Ellithmetic","Ellithmetic.html#method-i-inverse","(n, base)","<p>Computes the inverse of any number in <em>Z/pZ</em>\n<p>Attributes\n<p><code>n</code> - The number to compute. It will be reduced <em>modulo</em>\n...\n"],["isInfty?","ProjPoint","ProjPoint.html#method-i-isInfty-3F","()","<p>Tests if this projective point is an <em>infinity point</em>.\n<p>Examples\n<p>Basic usage:\n"],["new","ElliPoint","ElliPoint.html#method-c-new","(x, y, z=1)","<p>Creates a new point from the elliptic curve.\n<p>WARNING: if the coordinates do not match a point on the curve, …\n"],["new","Point","Point.html#method-c-new","(x, y, z)","<p>Creates a new point.\n<p>Attributes\n<p><code>x</code> - The first coordinate. It will be reduced <em>modulo\np</em>.\n"],["new","ProjPoint","ProjPoint.html#method-c-new","(x, y, z=1)","<p>Creates a new projective point.\n<p>Attributes\n<p><code>x</code> - The first coordinate. It will be reduced <em>modulo\np</em>.\n"],["x","ProjPoint","ProjPoint.html#method-i-x","()","<p>Gets <code>:x</code>, the first homogeneous coordinate of this projective\npoint.\n<p>WARNING: calling x on an <em>infinity</em> …\n"],["y","ProjPoint","ProjPoint.html#method-i-y","()","<p>Gets <code>:y</code>, the second homogeneous coordinate of this projective\npoint.\n<p>WARNING: calling y on an <em>infinity</em> …\n"]]}}